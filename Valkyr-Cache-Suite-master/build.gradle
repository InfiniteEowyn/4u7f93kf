/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/tutorial_java_projects.html
 */

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	}
	dependencies {
		// provides javafx-gradle-plugin
	   // classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: "8.8.2"
		// provides proguard.gradle.ProGuardTask (including all requirements)
		classpath 'net.sf.proguard:proguard-gradle:6.0.2'
	}
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8


// In this section you declare where to find the dependencies of your project
repositories {
	// Use 'jcenter' for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {
	
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.25'
	compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
	compile group: 'org.apache.ant', name: 'ant', version: '1.9.4'
	
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.4'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.
	testCompile 'junit:junit:4.12'
}

jar {
	archiveName = "suite-base.jar"
	manifest {
		attributes(
			'Main-Class': 'Main',
		)
	}
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it).matching{ exclude{it.name.contains('MANIFEST.MF') } } }

}


task myProguardTask(type: proguard.gradle.ProGuardTask) {
	
	configuration 'proguard.conf'
	
	configurations.runtime.resolve().each {
		libraryjars file(it.getAbsolutePath())
	}
	
	injars 'build/dist/deploy/suite-base.jar'
	outjars 'build/dist/deploy/Valkyr_Cache_Suite.jar'
}


jar.finalizedBy(myProguardTask)

